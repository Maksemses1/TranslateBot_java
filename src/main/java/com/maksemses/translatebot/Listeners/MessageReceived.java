package com.maksemses.translatebot.Listeners;

import com.maksemses.translatebot.configs.TimerCFG;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.entities.TextChannel;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Arrays;
import java.util.List;

@Component
public class MessageReceived extends ListenerAdapter {
    @Autowired
    TimerCFG timerCFG;
    @Override
    public void onMessageReceived(MessageReceivedEvent event) {
        if (event.getAuthor().isBot()) {
            return;
        }
        List<String> allowedRoleIds = Arrays.asList(
                "1311316499671158897", // ID —Ä–æ–ª–∏ R:-(–ø—Ä–∏–º–µ—Ä)
                "1311306069959639040",  // ID —Ä–æ–ª–∏ üëëR5(–ø—Ä–∏–º–µ—Ä)
                "1311316404082835477"
        );
        System.out.println(event.getMember().getRoles());
        Message messageClear = event.getMessage();
        String content = messageClear.getContentRaw();
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        System.out.println("Received message: " + content);
        TextChannel channel = event.getTextChannel();


        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "!translate"
        if (content.startsWith("!setMessageTimer ")) {
            boolean hasRequiredRole = event.getMember().getRoles().stream()
                    .anyMatch(role -> allowedRoleIds.contains(role.getId()));
            if (!hasRequiredRole) {
                // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω—É–∂–Ω–æ–π —Ä–æ–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                event.getChannel().sendMessage("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.").queue();
                return;
            }
            try {
                // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ (–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                String[] commandParts = content.split(" ");
                int timerInSeconds = Integer.parseInt(commandParts[1]);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é TimerCFG.SetTimer
                timerCFG.setMessageTimeSeconds(timerInSeconds); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                Message message = channel.sendMessage("–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ " + timerInSeconds + " —Å–µ–∫—É–Ω–¥.").complete();

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                message.delete().queueAfter(timerInSeconds, java.util.concurrent.TimeUnit.SECONDS);

            } catch (NumberFormatException e) {
                // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ
                channel.sendMessage("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Ç–∞–π–º–µ—Ä–∞.").queue();
            } catch (ArrayIndexOutOfBoundsException e) {
                // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                channel.sendMessage("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: !setMessageTimer 30").queue();
            }

        }
    }
}
